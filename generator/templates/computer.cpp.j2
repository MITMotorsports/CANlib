#include "canlib_{{ computer.name }}.hpp"
#include "bus.hpp"
#include "drivers/{{ system.architecture['name'][computer.architecture].family }}.hpp"

using namespace CANlib;

RawBus CANlib::get_raw_bus(AbstractBus bus_name) {
  switch (bus_name) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case AbstractBus::{{ busnm }}:
      return RawBus::{{ rawnm }};
{%- endfor %}
    default:
      return RawBus::INVALID_BUS;
  }
}

AbstractBus CANlib::get_bus_name(RawBus bus) {
	switch (bus) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case RawBus::{{ rawnm }}:
      return AbstractBus::{{ busnm }};
{%- endfor %}
    default:
      return AbstractBus::INVALID_NAME;
  }
}


{% for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
{% if testing -%}
void CANlib::{{busnm}}_update_can() {
{%- else -%}
static void CANlib::{{busnm}}_update_can() {
{%- endif %}
  Frame frame;
  read_frame(frame, AbstractBus::{{ busnm }});
  handle_frame(AbstractBus::{{busnm}}, frame);
}
{% endfor %}

void CANlib::update_can(void) {
{%- for busnm in computer.participation['name']['can'].subscribe.keys() %}
  {{ busnm }}_update_can();
{%- endfor %}
}
