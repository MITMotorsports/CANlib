{%- macro key_type(num_bits) -%} uint{{ (((num_bits / 8) | round(method='ceil')) * 8) | int }}_t {%- endmacro -%}

{%- macro handle_case(busnm, msg, msg_name=msg.name, indent=2) -%}
{%- if msg.frame is defined -%}
case CANlib_{{ busnm }}_{{ msg_name }}_key: {
  uint64_t bitstring;
  to_bitstring(frame->data, &bitstring);
  {{ key_type(msg.slice.length) }} {{ busnm }}_{{ msg_name }}_key = EXTRACT(bitstring, {{ msg.slice.start }}, {{ msg.slice.length }});
  switch ({{ busnm }}_{{ msg_name }}_key) {
  {%- for sub_frame in msg.frame %}
    {{ handle_case(busnm, sub_frame, msg_name + '_' + sub_frame.name, indent + 2) | indent(indent + 2) }}
  {%- endfor %}
    default:
      return;
  }
  break;
}
{%- else -%}
case CANlib_{{ busnm }}_{{ msg_name }}_key:
  CANlib_Handle_{{ busnm }}_{{ msg_name }}(frame);
  break;
{%- endif -%}
{%- endmacro -%}

{%- macro identify_case(busnm, msg, msg_name=msg.name, indent=2) -%}
{%- if msg.frame is defined -%}
case CANlib_{{ busnm }}_{{ msg_name }}_key: {
  uint64_t bitstring;
  to_bitstring(frame->data, &bitstring);
  {{ key_type(msg.slice.length) }} {{ busnm }}_{{ msg_name }}_key = EXTRACT(bitstring, {{ msg.slice.start }}, {{ msg.slice.length }});
  switch ({{ busnm }}_{{ msg_name }}_key) {
  {%- for sub_frame in msg.frame %}
    {{ identify_case(busnm, sub_frame, msg_name + '_' + sub_frame.name, indent + 2) | indent(indent + 2) }}
  {%- endfor %}
    default:
      return CANlib_{{ busnm }}_UNKNOWN_MSG;
      break;
  }
  break;
}
{%- else -%}
case CANlib_{{ busnm }}_{{ msg_name }}_key:
  return CANlib_{{ busnm }}_{{ msg_name }};
  break;
{%- endif -%}
{%- endmacro -%}

#include "canlib_{{ computer.name }}.h"
#include "constants.h"
#include "bus.h"
#include "pack_unpack.h"
#include "evil_macros.h"
#include "drivers/inc/{{ system.architecture['name'][computer.architecture].family }}/{{ system.architecture['name'][computer.architecture].family }}.h"

#ifndef UNUSED
#define UNUSED(X) (void)X
#endif

CAN_Raw_Bus_T CANlib_GetRawBus(CANlib_Bus_T bus) {
  switch (bus) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case {{ busnm }}:
      return {{ rawnm }};
{%- endfor %}
    default:
      return INVALID_BUS;
  }
}

CAN_Raw_Bus_T CANlib_GetConceptualBus(CAN_Raw_Bus_T bus) {
	switch (bus) {
{%- for busnm, rawnm in computer.participation['name']['can'].mapping.items() %}
    case {{ rawnm }}:
      return (CAN_Raw_Bus_T){{ busnm }};
{%- endfor %}
    default:
      return INVALID_BUS;
  }
}

{%- for busnm, bus in computer.participation['name']['can'].subscribe.items() %}

CANlib_{{ busnm }}_T CANlib_Identify_{{ busnm }}(Frame* frame) {
  switch (frame->id) {
  {%- for frame in bus %}
    {{ identify_case(busnm, frame) | indent(4) }}
  {%- endfor %}
    default:
      return CANlib_{{ busnm }}_UNKNOWN_MSG;
      break;
  }
}
{%- endfor %}

{%- for busnm, bus in computer.participation['name']['can'].subscribe.items() %}

static void CANlib_HandleFrame_{{ busnm }}(Frame *frame) {
  switch (frame->id) {
{%- for frame in bus %}
    {{ handle_case(busnm, frame) | indent(4) }}
{%- endfor %}
    default:
      return;
  }
}
{%- endfor %}

void CANlib_HandleFrame(CAN_Raw_Bus_T raw_bus, Frame* frame) {
  switch (raw_bus) {
{%- for busnm in computer.participation['name']['can'].subscribe.keys() %}
    case {{computer.participation['name']['can'].mapping[busnm] }}:
      CANlib_HandleFrame_{{ busnm }}(frame);
      break;
{%- endfor %}
    default:
      UNUSED(frame);
      break;
  }
}

{%- for busnm in computer.participation['name']['can'].subscribe.keys() %}

static void CANlib_update_can_{{ busnm }}(void) {
  Frame frame;
  CANlib_ReadFrame(&frame, {{ busnm }});
  CANlib_HandleFrame_{{ busnm }}(&frame);
}
{%- endfor %}

void CANlib_update_can(void) {
{%- for busnm in computer.participation['name']['can'].subscribe.keys() %}
  CANlib_update_can_{{ busnm }}();
{%- endfor %}
}
