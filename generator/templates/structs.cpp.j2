{%- macro struct_declarations(bus, msg, msg_names = [msg.name]) -%}
{%- if msg.frame is defined %}

    namespace {{msg.name}} {
    {% for sub_frame in msg.frame -%}
        {{ struct_declarations(bus, sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor %}

    }
{% else %}
    {{msg.name}} {{msg.name}}_input;

    {{ msg.name }}* CANlib::{{bus.name}}::{{'::'.join(msg_names)}}::get_input() {
        return &{{msg.name}}_input;
    }

{% endif -%}
{%- endmacro -%}

{%- macro get_message_type(bus, msg, msg_names) -%}
{%- if msg.frame is defined -%}
    MessageType::UNKNOWN_MSG,
    {%- for sub_frame in msg.frame -%}
        {{ get_message_type(bus, sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor -%}
{%- else -%}
     MessageType::{{'_'.join(msg_names)}},
{%- endif -%}
{%- endmacro -%}

{%- macro get_messages(msg, msg_names) -%}
{%- if msg.frame is defined -%}
    nullptr,
    {%- for sub_frame in msg.frame -%}
        {{ get_messages(sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor -%}
{%- else -%}
     &{{'::'.join(msg_names)}}_input,
{%- endif -%}
{%- endmacro -%}

{%- macro get_keys(msg, msg_names) -%}
{%- if msg.frame is defined -%}
    {{ "::".join(msg_names) }}::key,
    {%- for sub_frame in msg.frame -%}
        {{ get_keys(sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor -%}
{%- else -%}
     {{"::".join(msg_names)}}::key,
{%- endif -%}
{%- endmacro -%}

{%- macro get_message_ranges(msg, msg_names) -%}
{%- if msg.frame is defined -%}
    std::make_pair({{ msg.slice.start }}, {{ msg.slice.length }}),
    {%- for sub_frame in msg.frame -%}
        {{ get_message_ranges(sub_frame, msg_names + [sub_frame.name]) }}
    {%- endfor -%}
{%- else -%}
     std::make_pair(1, 0),
{%- endif -%}
{%- endmacro -%}

{%- macro get_frame_ranges(msg, msg_names, cnt = 0) -%}
{%- if msg.frame is defined -%}
    {{ get_num_msg_types(msg) }},
    {%- for sub_frame in msg.frame -%}
        {{ get_frame_ranges(sub_frame, msg_names + [sub_frame.name], cnt + 1) }}
    {%- endfor -%}
{%- else -%}
     0,
{%- endif -%}
{%- endmacro -%}

#include <stdint.h>
#include <stdbool.h>
#include <chrono>
#include "static.hpp"
#include "bus.hpp"
#include "structs.hpp"

namespace CANlib {

void send_period(Clock::time_point &last_sent, Message* msg) {
    if (Clock::now() - last_sent > msg->get_period()) {
        last_sent = Clock::now();
        send(msg);
    }
}

void send(Message* msg) {
    Frame frame;
    msg->unpack(frame);
    transmit_frame(frame, msg->get_bus_name());
}

{% for bus in can.bus %}
namespace {{bus.name}} {
{% for msg in bus.frame -%}
{{ struct_declarations(bus, msg) }}
{%- endfor %}

extern const MessageType message_types[{{get_num_msg_types(bus)}}] = {
    MessageType::UNKNOWN_MSG,
    {% for msg in bus.frame -%}
        {{ get_message_type(bus, msg, [msg.name]) }}
    {%- endfor -%}
};

}

static const uint32_t {{bus.name}}_keys[] = {
    0,
    {% for msg in bus.frame -%}
        {{ get_keys(msg, [bus.name, msg.name]) }}
    {%- endfor -%}
};

/**
 * In case the some index represents a frame, the first element represents the lower bound
 * of the frame inside the array and the second element represents the upper bound of the 
 * frame inside the array.
 **/
static const std::pair<uint32_t, uint32_t> {{bus.name}}_frame_id_range[] = {
    std::make_pair(1,0),
    {% for msg in bus.frame -%}
        {{ get_message_ranges(msg, [bus.name, msg.name]) }}
    {%- endfor -%}
};

// In case some index represents a frame, it will contain number of messages inside the frame
static const uint32_t {{bus.name}}_frame_len[] = {
    0,
    {% for msg in bus.frame -%}
        {{ get_frame_ranges(msg, [bus.name, msg.name]) }}
    {%- endfor -%}
};

static Message* {{bus.name}}_messages[] = {
    nullptr,
    {%- for msg in bus.frame -%}
        {{ get_messages(msg, ['CANlib', bus.name, msg.name]) }}
    {%- endfor -%}
};
{% endfor %}

const uint32_t* keys[{{ get_len(can) }}] = {
{%- for bus in can.bus -%}
{{bus.name}}_keys,
{%- endfor -%}
};

const std::pair<uint32_t, uint32_t>* frame_id_range[{{ get_len(can) }}] = {
{%- for bus in can.bus -%}
{{bus.name}}_frame_id_range,
{%- endfor -%}
};

const uint32_t* frame_len[{{ get_len(can) }}] = {
{%- for bus in can.bus -%}
{{bus.name}}_frame_len,
{%- endfor -%}
};

extern const size_t can_size[{{ get_len(can) }}] = {
{%- for bus in can.bus -%}
{{ get_num_msg_types(bus) }},
{%- endfor -%}
};

Message** messages[{{ get_len(can) }}] = {
{%- for bus in can.bus -%}
{{bus.name}}_messages,
{%- endfor -%}

};

}
