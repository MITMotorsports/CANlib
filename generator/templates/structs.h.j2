{%- macro struct_declarations(bus, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined -%}
{%- for sub_frame in msg.frame -%}
{{ struct_declarations(bus, sub_frame, msg_name + '_' + sub_frame.name) }}
{%- endfor -%}
{%- else %}
typedef struct {
{%- for atom in msg.atom %}
{%- if atom.type.isenum() %}
  CANlib_{{ bus.name }}_{{ msg_name }}_{{ atom.name }}_T {{ atom.name }};
{%- else %}
  {%- if all_unit_files is not none and atom.unit in unit_types -%}
  au::QuantityD<{{ unit_types[atom.unit] }}> {{ atom.name }};
  {%- else -%}
  {{ atom.type.ctype() }} {{ atom.name }};
  {%- endif -%}
{%- endif -%}
{% endfor %}
} CANlib_{{ bus.name }}_{{ msg_name }}_T;
{% endif %}
{%- endmacro -%}

#pragma once

#include <stdint.h>
#include <stdbool.h>

#include "enum_atom.h"
{% if all_unit_files is not none -%}
{%- for filename in all_unit_files -%}
#include "{{ filename }}"
{% endfor -%}
{%- endif %}

{% for bus in can.bus -%}
// {{ bus.name }}
{% for msg in bus.frame -%}
{{ struct_declarations(bus, msg) }}
{%- endfor -%}
{%- endfor -%}
