{%- macro struct_declarations(bus, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined -%}
{%- for sub_frame in msg.frame -%}
{{ struct_declarations(bus, sub_frame, msg_name + '_' + sub_frame.name) }}
{%- endfor -%}
{%- else -%}
CANlib_{{ bus.name }}_{{ msg_name }}_T CANlib_{{ bus.name }}_{{ msg_name }}_Input;
{% endif -%}
{%- endmacro -%}

{%- macro function_definitions(bus, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined -%}
{% for sub_frame in msg.frame -%}
{{ function_definitions(bus, sub_frame, msg_name + '_' + sub_frame.name) }}
{%- endfor -%}
{%- else %}
void CANlib_Send_{{ bus.name }}_{{ msg_name }}(CANlib_{{ bus.name }}_{{ msg_name }}_T *inp) {
{%- if msg.period is not none %}
  LIMIT(CANlib_{{ bus.name }}_{{ msg_name }});
{%- endif %}
	Frame frame;
	CANlib_Pack_{{ bus.name }}_{{ msg_name }}(inp, &frame);
	CANlib_TransmitFrame(&frame, {{ bus.name }});
}

void CANlib_Handle_{{ bus.name }}_{{ msg_name }}(Frame *frame) {
  CANlib_Unpack_{{ bus.name }}_{{ msg_name }}(frame, &CANlib_{{ bus.name }}_{{ msg_name }}_Input);
}
{% endif -%}
{%- endmacro -%}

#include "pack_unpack.h"
#include "bus.h"
#include "driver.h"

#define LIMIT(name)                                         \
  static Time_T last_sent = 0;                              \
  if (CANlib_GetTick() - last_sent < name##_period) return; \
  last_sent = CANlib_GetTick();

// Input Structs
{% for bus in can.bus %}
// {{ bus.name }}
{% for msg in bus.frame -%}
{{ struct_declarations(bus, msg) }}
{%- endfor %}
{%- endfor %}

// Functions
{% for bus in can.bus %}
// {{ bus.name }}
{% for msg in bus.frame -%}
{{- function_definitions(bus, msg) -}}
{%- endfor -%}
{%- endfor -%}
