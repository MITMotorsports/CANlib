{%- macro send_declaration(bus_name, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined -%}
{%- for sub_frame in msg.frame -%}
{{ send_declaration(bus_name, sub_frame, msg_name + '_' + sub_frame.name) }}
{%- endfor -%}
{%- else -%}
void CANlib_Send_{{ bus_name }}_{{ msg_name }}(CANlib_{{ bus_name }}_{{ msg_name }}_T *inp);
{% endif -%}
{%- endmacro -%}

{%- macro handle_stuff(bus_name, msg, msg_name=msg.name) -%}
{%- if msg.frame is defined -%}
{%- for sub_frame in msg.frame -%}
{{ handle_stuff(bus_name, sub_frame, msg_name + '_' + sub_frame.name) }}
{%- endfor -%}
{%- else -%}
extern CANlib_{{ bus_name }}_{{ msg_name }}_T CANlib_{{ bus_name }}_{{ msg_name }}_Input;
void CANlib_Handle_{{ bus_name }}_{{ msg_name }}(Frame *frame);
{% endif -%}
{%- endmacro -%}

#pragma once

#include <stdint.h>
#include <stdbool.h>

#include "driver.h"
#include "constants.h"
#include "enum_atom.h"
#include "structs.h"
#include "static.h"
#include "evil_macros.h"
#include "bus.h"
#include "pack_unpack.h"

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus
{% for bus_name, bus in computer.participation['name']['can'].publish.items() %}
{% for frame in bus -%}
{{ send_declaration(bus_name, frame) -}}
{%- endfor -%}
{% endfor -%}

{% for bus_name, bus in computer.participation['name']['can'].subscribe.items() %}
{% for frame in bus -%}
{{ handle_stuff(bus_name, frame) -}}
{%- endfor -%}
{% endfor %}
void CANlib_update_can(void);
void CANlib_HandleFrame(CAN_Raw_Bus_T raw_bus, Frame* frame);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
